#include <Wire.h>
#include <Adafruit_BNO055.h>
#include <utility/imumaths.h>

 
/* This driver reads raw data from the BNO055
   Connections
   ===========
   Connect SCL to analog 5 or SCL(21) for MEGA
   Connect SDA to analog 4 or SDA(20) for MEGA
   Connect VDD to 3.3V DC
   Connect GROUND to common ground
   History
   =======
   2015/MAR/03  - First release (KTOWN)
*/

/* Set the delay between fresh samples. Wait for serial input to define sample rate. */


Adafruit_BNO055 bno = Adafruit_BNO055();


void setup(void){
   
 #define BNO055_SAMPLERATE_DELAY_MS (100) 
 
  //remove the above serial read after testing and timing diagram is established.
  Serial.begin(9600);
  
  /* Initialise the sensor */
  
  if(!bno.begin())
  {
    /* There was a problem detecting the BNO055 ... check your connections */
    Serial.println("ConnectionFail");
    while(1);
  }
  
  bno.setMode(B00001000); //set the IMU to IMU mode as per datasheet pg.21
  bno.setExtCrystalUse(false); //set the BNO055 to use internal crystal if false.

}
void loop(){
  Serial.println(IMU_data());
}


String IMU_data()
{
 String data;
  // Possible vector values can be:
  // - VECTOR_ACCELEROMETER - m/s^2
  // - VECTOR_MAGNETOMETER  - uT
  // - VECTOR_GYROSCOPE     - rad/s
  // - VECTOR_EULER         - degrees
  // - VECTOR_LINEARACCEL   - m/s^2
  // - VECTOR_GRAVITY       - m/s^2
  imu::Vector<3> euler = bno.getVector(Adafruit_BNO055::VECTOR_EULER); //collects data from IMU registers.
  /* Display the floating point data */
 data = "horizontal[ " + String(euler.x()) + "] vertical[ " + String(euler.z()) + "]"; //creates formatted output of IMU data.
  return data;
}
